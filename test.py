import sys

import numpy as np
from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
from sklearn.svm import SVC

import mlogger
import random
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.metrics import accuracy_score
from GCForest import gcForest


# iris = datasets.load_iris()
# x = iris.data
# y = iris.target
#
# x_train, x_test, y_train, y_test = ts(x, y, test_size=0.3)
#
# clf = svm.SVC()
# clf.fit(x_train,y_train)
# score_rbf = clf.score(x_test,y_test)
# print("The score of rbf is : %f"%score_rbf)

# x, y = datasets.make_moons()
# print(x.shape)
# print(y)
# plt.scatter(x[y==0,0],x[y==0,1])
# plt.scatter(x[y==1,0],x[y==1,1])
# plt.show()

# svc=svm.SVC()
# svc.fit(x,y)
# score = svc.score(x,y)
# print("score: ",score)
# np.cov()

# x, y = datasets.load_digits(return_X_y=True)
#
# digits = datasets.load_digits()
# print(x.shape)
# print(digits.data.shape)
# plt.imshow(digits.images[0])  # doctest: +SKIP
# print(x[0])
# print(digits.images[0])
# plt.show()  # doctest: +SKIP

def testGCForest():
    # data = pd.read_csv('./data_genetic/data_all_features.csv')
    # MCI = data[data.DX_bl == 2].copy()
    # X = MCI.drop(columns=['RID', 'DX_bl', 'TOMM40_A1', 'TOMM40_A2', 'ADNI_MEM', 'ADNI_EF', 'DECLINED'])
    X = pd.read_csv('./data/clf_MCI.csv')
    y = X.pop('DECLINED').values
    X = X.values
    skf = StratifiedKFold(10, random_state=0)
    g = []
    s = []
    for traini, testi in skf.split(X, y):
        X_train, X_test, Y_train, Y_test = X[traini], X[testi], y[traini], y[testi]
        print(X_test.tolist())
        gcf = gcForest(tolerance=0.0, min_samples_cascade=20)
        gcf.cascade_forest(X_train, Y_train)
        pred_proba = gcf.cascade_forest(X_test)
        print(np.array(pred_proba).shape)
        print(pred_proba)
        svc = SVC(C=100, kernel='poly', degree=2, gamma=0.01, class_weight={0: 1, 1: 2}, coef0=10)
        svc.fit(X_train, Y_train)
        s.append(svc.score(X_test, Y_test))
        # print(np.array(g).ravel())
        # print(np.array(s).mean())


if __name__ == '__main__':
    # data = [
    #     [11.53, 11.69, 11.70, 11.51, 871365.0, 1],
    #     [11.64, 11.63, 11.72, 11.57, 722764.0, 1],
    #     [11.59, 11.48, 11.59, 11.41, 461808.0, 1],
    #     [11.39, 11.19, 11.40, 11.15, 1074465.0, 1]]
    # df = DataFrame(data, index=["2017-10-18", "2017-10-19", "2017-10-20", "2017-10-23"],
    #                columns=["open", "close", "high", "low", "volume", "code"])
    # print(df)
    # print(df.values)
    # str = '2,3,2,3,2'
    # a = [1, 2, 2]
    # print(str.count('2'))
    # print(Counter(str))
    # sys.stdout = mlogger.Logger('./grid/test.grid')

    # print('grid test')
    # a = np.array([1, 2, 3])
    # print(np.square(a))
    #
    # rkf = RepeatedKFold(n_splits=10, n_repeats=2)
    # x = np.array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]).reshape(10, 2)
    # y = np.array([1, 0, 1, 0, 1, 0, 1, 0, 1, 0])
    # for train, test in rkf.split(x):
    #     print('train:', train, "test:", test)

    # rskf = RepeatedStratifiedKFold(n_splits=4, n_repeats=1, random_state=0)
    # for train_index, test_index in rskf.split([0, 1, 2, 3]):
    #     print('train', train_index)
    #     print('test', test_index)
    # a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    # b=a[0]*1+a[1]*2
    # print(b)

    # random.seed(0)
    # for i in range(5):
    #     print(random.randint(1, 100))
    # testGCForest()
    a = [np.array([[0.85065595, 0.14934405],
                   [0.64079204, 0.35920796],
                   [0.6135553, 0.3864447],
                   [0.61323227, 0.38676773],
                   [0.52231174, 0.47768826],
                   [0.73939399, 0.26060601],
                   [0.94505655, 0.05494345],
                   [0.93480269, 0.06519731],
                   [0.77911922, 0.22088078],
                   [0.84994082, 0.15005918],
                   [0.91448276, 0.08551724],
                   [0.48138831, 0.51861169],
                   [0.93399555, 0.06600445],
                   [0.78939694, 0.21060306],
                   [0.83368245, 0.16631755],
                   [0.93891957, 0.06108043],
                   [0.50048094, 0.49951906],
                   [0.86650376, 0.13349624],
                   [0.40492211, 0.59507789],
                   [0.9279174, 0.0720826],
                   [0.90281373, 0.09718627],
                   [0.86150263, 0.13849737],
                   [0.64863924, 0.35136076],
                   [0.77867234, 0.22132766],
                   [0.93505831, 0.06494169],
                   [0.49916334, 0.50083666],
                   [0.89987271, 0.10012729],
                   [0.92755842, 0.07244158],
                   [0.79703142, 0.20296858],
                   [0.92207603, 0.07792397],
                   [0.90072698, 0.09927302],
                   [0.81194318, 0.18805682],
                   [0.8482546, 0.1517454],
                   [0.93240122, 0.06759878],
                   [0.78778894, 0.21221106],
                   [0.78878611, 0.21121389],
                   [0.57621846, 0.42378154],
                   [0.51219457, 0.48780543],
                   [0.5460009, 0.4539991],
                   [0.66871583, 0.33128417],
                   [0.55100699, 0.44899301]]), np.array([[0.75580362, 0.24419638],
                                                         [0.56255704, 0.43744296],
                                                         [0.74784293, 0.25215707],
                                                         [0.62047233, 0.37952767],
                                                         [0.54897463, 0.45102537],
                                                         [0.80553759, 0.19446241],
                                                         [0.96055022, 0.03944978],
                                                         [0.90558971, 0.09441029],
                                                         [0.76978966, 0.23021034],
                                                         [0.89007736, 0.10992264],
                                                         [0.91137748, 0.08862252],
                                                         [0.53737415, 0.46262585],
                                                         [0.91872631, 0.08127369],
                                                         [0.85454673, 0.14545327],
                                                         [0.85602602, 0.14397398],
                                                         [0.9439268, 0.0560732],
                                                         [0.5661551, 0.4338449],
                                                         [0.8689229, 0.1310771],
                                                         [0.55716931, 0.44283069],
                                                         [0.90786851, 0.09213149],
                                                         [0.89266103, 0.10733897],
                                                         [0.88555295, 0.11444705],
                                                         [0.67201719, 0.32798281],
                                                         [0.84044058, 0.15955942],
                                                         [0.88575155, 0.11424845],
                                                         [0.65988866, 0.34011134],
                                                         [0.90513847, 0.09486153],
                                                         [0.89159692, 0.10840308],
                                                         [0.79048445, 0.20951555],
                                                         [0.89715085, 0.10284915],
                                                         [0.89136202, 0.10863798],
                                                         [0.75923832, 0.24076168],
                                                         [0.86657842, 0.13342158],
                                                         [0.89424791, 0.10575209],
                                                         [0.80136218, 0.19863782],
                                                         [0.84582872, 0.15417128],
                                                         [0.66267616, 0.33732384],
                                                         [0.5105708, 0.4894292],
                                                         [0.51744662, 0.48255338],
                                                         [0.77623336, 0.22376664],
                                                         [0.56161029, 0.43838971]]), np.array([[0.85065595, 0.14934405],
                                                                                               [0.64079204, 0.35920796],
                                                                                               [0.6135553, 0.3864447],
                                                                                               [0.61323227, 0.38676773],
                                                                                               [0.52231174, 0.47768826],
                                                                                               [0.73939399, 0.26060601],
                                                                                               [0.94505655, 0.05494345],
                                                                                               [0.93480269, 0.06519731],
                                                                                               [0.77911922, 0.22088078],
                                                                                               [0.84994082, 0.15005918],
                                                                                               [0.91448276, 0.08551724],
                                                                                               [0.48138831, 0.51861169],
                                                                                               [0.93399555, 0.06600445],
                                                                                               [0.78939694, 0.21060306],
                                                                                               [0.83368245, 0.16631755],
                                                                                               [0.93891957, 0.06108043],
                                                                                               [0.50048094, 0.49951906],
                                                                                               [0.86650376, 0.13349624],
                                                                                               [0.40492211, 0.59507789],
                                                                                               [0.9279174, 0.0720826],
                                                                                               [0.90281373, 0.09718627],
                                                                                               [0.86150263, 0.13849737],
                                                                                               [0.64863924, 0.35136076],
                                                                                               [0.77867234, 0.22132766],
                                                                                               [0.93505831, 0.06494169],
                                                                                               [0.49916334, 0.50083666],
                                                                                               [0.89987271, 0.10012729],
                                                                                               [0.92755842, 0.07244158],
                                                                                               [0.79703142, 0.20296858],
                                                                                               [0.92207603, 0.07792397],
                                                                                               [0.90072698, 0.09927302],
                                                                                               [0.81194318, 0.18805682],
                                                                                               [0.8482546, 0.1517454],
                                                                                               [0.93240122, 0.06759878],
                                                                                               [0.78778894, 0.21221106],
                                                                                               [0.78878611, 0.21121389],
                                                                                               [0.57621846, 0.42378154],
                                                                                               [0.51219457, 0.48780543],
                                                                                               [0.5460009, 0.4539991],
                                                                                               [0.66871583, 0.33128417],
                                                                                               [0.55100699,
                                                                                                0.44899301]]),
         np.array([[0.75580362, 0.24419638],
                   [0.56255704, 0.43744296],
                   [0.74784293, 0.25215707],
                   [0.62047233, 0.37952767],
                   [0.54897463, 0.45102537],
                   [0.80553759, 0.19446241],
                   [0.96055022, 0.03944978],
                   [0.90558971, 0.09441029],
                   [0.76978966, 0.23021034],
                   [0.89007736, 0.10992264],
                   [0.91137748, 0.08862252],
                   [0.53737415, 0.46262585],
                   [0.91872631, 0.08127369],
                   [0.85454673, 0.14545327],
                   [0.85602602, 0.14397398],
                   [0.9439268, 0.0560732],
                   [0.5661551, 0.4338449],
                   [0.8689229, 0.1310771],
                   [0.55716931, 0.44283069],
                   [0.90786851, 0.09213149],
                   [0.89266103, 0.10733897],
                   [0.88555295, 0.11444705],
                   [0.67201719, 0.32798281],
                   [0.84044058, 0.15955942],
                   [0.88575155, 0.11424845],
                   [0.65988866, 0.34011134],
                   [0.90513847, 0.09486153],
                   [0.89159692, 0.10840308],
                   [0.79048445, 0.20951555],
                   [0.89715085, 0.10284915],
                   [0.89136202, 0.10863798],
                   [0.75923832, 0.24076168],
                   [0.86657842, 0.13342158],
                   [0.89424791, 0.10575209],
                   [0.80136218, 0.19863782],
                   [0.84582872, 0.15417128],
                   [0.66267616, 0.33732384],
                   [0.5105708, 0.4894292],
                   [0.51744662, 0.48255338],
                   [0.77623336, 0.22376664],
                   [0.56161029, 0.43838971]])]
    print(np.array(a).shape)
    # print(np.mean(a, axis=0))
    # print(np.mean(a))

    swap_pred = np.swapaxes(a, 0, 1)

    print(swap_pred.shape)
    print(swap_pred)
    # add_feat = swap_pred.reshape([41, -1])
    # print(add_feat.shape)
    # print(add_feat)
    # feat_arr = np.concatenate([add_feat, xtest], axis=1)
    # print(feat_arr)
